estamos haciendo un proyecto mvc con php como api, y javascript con fetch y html y css.

usamos docker con mariadb mariadb:10.11.13 y php.

las carpetas estan organizadas en:

-RedDeOicios

--api

---config

----database.php

---controllers

----registroController.php

----loginController.php

---model

----registroModel.php

----loginModel.php

--public

---assets

---js

---index.html

---pergil.html

---publicacion.html

---index.php

--docker

---apache-conf.conf

---Dockerfile

---xdebug.ini

--config

docker-compose.yml



el docker compose

services:

  web:  # Servicio principal: servidor Apache + PHP

    build:

      context: .  # Usa la raíz del proyecto como contexto de construcción

      dockerfile: ./docker/Dockerfile  # Dockerfile personalizado con Xdebug y mod_rewrite



    container_name: reddeoficios_web  # Nombre del contenedor para identificarlo fácilmente



    ports:

      - "8081:80"  # Expone el puerto 80 del contenedor en el puerto 8081 del host



    volumes:

      - ./public:/var/www/html/public  # Monta la carpeta pública como DocumentRoot

      - ./api:/var/www/html/api        # Monta la API PHP (no accesible desde navegador)

      - ./config:/var/www/html/config  # Monta configuración (como DB, constantes)

      - ./docker/apache-conf.conf:/etc/apache2/sites-available/000-default.conf  # Configuración personalizada de Apache

      - ./docker/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini  # Configuración de Xdebug



    restart: always  # Reinicia el contenedor automáticamente si se detiene



    command: >

      bash -c "docker-php-ext-install pdo_mysql && apache2-foreground"

      # Instala la extensión PDO para MySQL y arranca Apache en primer plano



  db:  # Servicio de base de datos: MariaDB

    image: mariadb:10.11.13  # Imagen oficial de MariaDB con versión específica

    container_name: reddeoficios_db  # Nombre del contenedor de la base de datos



    ports:

      - "3306:3306"  # Expone el puerto de MySQL para conexión externa



    environment:

      MYSQL_ROOT_PASSWORD: catalystdigital05  # Contraseña del usuario root

      MYSQL_DATABASE: reddeoficios            # Base de datos inicial



    volumes:

      - db_data:/var/lib/mysql  # Volumen persistente para los datos de la base



    restart: always  # Reinicia el contenedor automáticamente si se detiene



volumes:

  db_data:  # Define el volumen persistente para la base de datos



el indexphp

<?php

require_once '../api/config/database.php';

require_once '../api/controllers/registroController.php';

require_once '../api/controllers/loginController.php';



$accion = $_GET['accion'] ?? '';



switch ($accion) {

  case 'registro':

    (new RegistroController())->registrar();

    break;

  case 'login':

    (new LoginController())->login();

    break;

  default:

    http_response_code(404);

    echo json_encode(['mensaje' => 'Acción no válida']);

}

la conexion llamaba database

<?php

require_once '../api/config/database.php';

require_once '../api/controllers/registroController.php';

require_once '../api/controllers/loginController.php';



$accion = $_GET['accion'] ?? '';



switch ($accion) {

  case 'registro':

    (new RegistroController())->registrar();

    break;

  case 'login':

    (new LoginController())->login();

    break;

  default:

    http_response_code(404);

    echo json_encode(['mensaje' => 'Acción no válida']);

}



login controller

<?php

require_once '../api/config/database.php';

require_once '../api/controllers/registroController.php';

require_once '../api/controllers/loginController.php';



$accion = $_GET['accion'] ?? '';



switch ($accion) {

  case 'registro':

    (new RegistroController())->registrar();

    break;

  case 'login':

    (new LoginController())->login();

    break;

  default:

    http_response_code(404);

    echo json_encode(['mensaje' => 'Acción no válida']);

}

y el registro controller 

<?php

require_once '../api/config/database.php';

require_once '../api/controllers/registroController.php';

require_once '../api/controllers/loginController.php';



$accion = $_GET['accion'] ?? '';



switch ($accion) {

  case 'registro':

    (new RegistroController())->registrar();

    break;

  case 'login':

    (new LoginController())->login();

    break;

  default:

    http_response_code(404);

    echo json_encode(['mensaje' => 'Acción no válida']);

}



login model

<?php

require_once '../config/database.php';



class LoginModel {

  public function obtenerHash($usuario) {

    try {

      $stmt = $conn->prepare("SELECT contrasenaUsuario FROM usuario WHERE nombreUsuario = ?");

      $stmt->execute([$usuario]);

      return $stmt->fetchColumn();

    } catch (PDOException $e) {

      error_log("Excepción en loginModel: " . $e->getMessage());

      return null;

    }

  }

}

y registromodel 



<?php

require_once '../config/database.php';



class RegistroModel {

  public function crearUsuario($usuario, $hash) {

    try {

      $stmt = $conn->prepare("INSERT INTO usuario (nombreUsuario, contrasenaUsuario) VALUES (?, ?)");

      $resultado = $stmt->execute([$usuario, $hash]);



      if (!$resultado) {

        error_log("Error en registroModel: " . implode(" | ", $stmt->errorInfo()));

      }



      return $resultado;

    } catch (PDOException $e) {

      error_log("Excepción en registroModel: " . $e->getMessage());

      return false;

    }

  }

}

